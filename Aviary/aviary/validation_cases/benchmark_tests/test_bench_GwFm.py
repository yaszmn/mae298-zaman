"""
Notes
-----
Includes:
Takeoff, Climb, Cruise, Descent, Landing
Computed Aero
Large Single Aisle 1 data
"""

import unittest
from copy import deepcopy

import numpy as np
from openmdao.core.problem import _clear_problem_names
from openmdao.utils.testing_utils import require_pyoptsparse, use_tempdirs

from aviary.interface.methods_for_level1 import run_aviary
from aviary.models.aircraft.test_aircraft.GwFm_phase_info import phase_info
from aviary.validation_cases.benchmark_utils import compare_against_expected_values


@use_tempdirs
class ProblemPhaseTestCase(unittest.TestCase):
    """
    Test the setup and run of a large single aisle commercial transport aircraft using
    GASP mass method, GASP aero method, and HEIGHT_ENERGY mission method. Expected outputs
    based on 'models/aircraft/test_aircraft/aircraft_for_bench_FwFm.csv' model.
    """

    def setUp(self):
        expected_dict = {}

        # block auto-formatting of tables
        # fmt: off
        expected_dict['times'] = np.array(
            [
                [0.0], [35.44351212], [84.34832473], [99.82653071], [99.82653071], [175.26943791],
                [279.36525173], [312.31122089], [312.31122089], [410.19100215], [545.24512274],
                [587.98929015], [587.98929015], [685.86907141], [820.923192], [863.66735941],
                [863.66735941], [939.1102666], [1043.20608042], [1076.15204958], [1076.15204958],
                [1111.59556171], [1160.50037431], [1175.9785803], [1175.9785803], [9079.76302018],
                [19985.372362], [23436.96043162], [23436.96043162], [23608.01963971],
                [23844.04643319], [23918.74810633], [23918.74810633], [24268.09962982],
                [24750.13342859], [24902.69547779], [24902.69547779], [25318.03987414],
                [25891.13036812], [26072.51155003], [26072.51155003], [26421.86307352],
                [26903.89687229], [27056.45892149], [27056.45892149], [27227.51812957],
                [27463.54492305], [27538.24659619],
            ]
        )

        expected_dict['altitudes'] = np.array(
            [
                [1.06680000e01], [1.75893172e02], [9.46408953e02], [1.32134196e03], [1.32134196e03],
                [3.11445470e03], [4.97144244e03], [5.41008257e03], [5.41008257e03], [6.51672447e03],
                [7.74801608e03], [8.06629246e03], [8.06629246e03], [8.71104542e03], [9.45373608e03],
                [9.65329790e03], [9.65329790e03], [9.97691027e03], [1.03789374e04], [1.04954293e04],
                [1.04954293e04], [1.05962176e04], [1.06638513e04], [1.06680000e04], [1.06680000e04],
                [1.06680000e04], [1.06680000e04], [1.06680000e04], [1.06680000e04], [1.06680000e04],
                [1.06680000e04], [1.06680000e04], [1.06680000e04], [1.06680000e04], [1.06680000e04],
                [1.06680000e04], [1.06680000e04], [1.04608909e04], [9.49505220e03], [9.02507507e03],
                [9.02507507e03], [7.63207198e03], [4.35806338e03], [2.99524490e03], [2.99524490e03],
                [1.59457677e03], [3.69306987e02], [1.52400000e02],
            ]
        )

        expected_dict['masses'] = np.array(
            [
                [77361.51975924], [77270.51854549], [77141.65302837], [77104.71422447],
                [77104.71422447], [76941.27090846], [76753.64296774], [76702.53488499],
                [76702.53488499], [76563.68643732], [76395.73949189], [76348.05709341],
                [76348.05709341], [76245.44377245], [76115.86511398], [76077.67355086],
                [76077.67355086], [76012.88182425], [75928.38145408], [75902.8275571],
                [75902.8275571], [75876.40401633], [75842.31565887], [75832.06686674],
                [75832.06686674], [71104.64472312], [64954.26684732], [63085.9645323],
                [63085.9645323], [62996.16016685], [62872.90067674], [62833.95037133],
                [62833.95037133], [62651.41955818], [62397.32666607], [62315.99678281],
                [62315.99678281], [62107.31484338], [61874.89401841], [61817.83630664],
                [61817.83630664], [61733.10749575], [61656.10364388], [61636.95406205],
                [61636.95406205], [61603.3160787], [61549.72162395], [61535.43675845],
            ]
        )

        expected_dict['ranges'] = np.array(
            [
                [1.00000000e00], [4.74198427e03], [1.37414828e04], [1.68318940e04], [1.68318940e04],
                [3.18584148e04], [5.27770771e04], [5.95458083e04], [5.95458083e04], [8.02418572e04],
                [1.09967777e05], [1.19584064e05], [1.19584064e05], [1.41874036e05], [1.73059575e05],
                [1.82991722e05], [1.82991722e05], [2.00549682e05], [2.24726489e05], [2.32341402e05],
                [2.32341402e05], [2.40509164e05], [2.51778850e05], [2.55355789e05], [2.55355789e05],
                [2.08392849e06], [4.60698560e06], [5.40552455e06], [5.40552455e06], [5.44494993e06],
                [5.49894835e06], [5.51596807e06], [5.51596807e06], [5.59533266e06], [5.70499475e06],
                [5.73994374e06], [5.73994374e06], [5.83514250e06], [5.95846437e06], [5.99343870e06],
                [5.99343870e06], [6.05377296e06], [6.12937059e06], [6.15340515e06], [6.15340515e06],
                [6.18080515e06], [6.21436615e06], [6.22272000e06],
            ]
        )

        expected_dict['velocities'] = np.array(
            [
                [102.07377561], [161.2782508], [199.81349584], [201.60626064], [201.60626064],
                [200.21264516], [204.50750389], [207.35537804], [207.35537804], [215.80220464],
                [224.14489761], [226.04492923], [226.04492923], [229.41156529], [232.18006085],
                [232.62216037], [232.62216037], [232.77235904], [231.52065251], [230.77711992],
                [230.77711992], [230.27691888], [230.86129092], [231.35407027], [231.35407027],
                [231.35407027], [231.35407027], [231.35407027], [231.35407027], [229.67216212],
                [228.02443801], [227.66551514], [227.66551514], [226.95333659], [228.54367761],
                [229.66860513], [229.66860513], [226.46343745], [199.58744961], [185.36056365],
                [185.36056365], [162.65708107], [156.08586817], [160.2787063], [160.2787063],
                [157.2587354], [121.13691301], [101.91044472],
            ]
        )
        # fmt: on

        self.expected_dict = expected_dict

        self.phase_info = deepcopy(phase_info)

        _clear_problem_names()  # need to reset these to simulate separate runs

    @require_pyoptsparse(optimizer='IPOPT')
    def bench_test_swap_1_GwFm_IPOPT(self):
        prob = run_aviary(
            'models/aircraft/test_aircraft/aircraft_for_bench_GwFm.csv',
            self.phase_info,
            max_iter=100,
            optimizer='IPOPT',
            verbosity=0,
        )
        # self.assertTrue(prob.result.success)
        compare_against_expected_values(prob, self.expected_dict)

    @require_pyoptsparse(optimizer='SNOPT')
    def bench_test_swap_1_GwFm_SNOPT(self):
        prob = run_aviary(
            'models/aircraft/test_aircraft/aircraft_for_bench_GwFm.csv',
            self.phase_info,
            max_iter=50,
            optimizer='SNOPT',
            verbosity=0,
        )
        # self.assertTrue(prob.result.success)
        compare_against_expected_values(prob, self.expected_dict)


if __name__ == '__main__':
    # unittest.main()
    test = ProblemPhaseTestCase()
    test.setUp()
    test.bench_test_swap_1_GwFm_IPOPT()
