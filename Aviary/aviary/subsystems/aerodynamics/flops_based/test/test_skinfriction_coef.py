import unittest

import numpy as np
import openmdao.api as om
from openmdao.utils.assert_utils import assert_check_partials, assert_near_equal

from aviary.subsystems.aerodynamics.flops_based.skin_friction import SkinFriction
from aviary.variable_info.variables import Aircraft


class SkinFrictionCoeffTest(unittest.TestCase):
    def test_derivs(self):
        n = 12
        nc = 3

        machs = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.75, 0.775, 0.8, 0.825, 0.85, 0.875])
        lens = np.linspace(1, 2, nc)
        temp = np.ones(n) * 389.97
        pres = np.ones(n) * 2.60239151

        prob = om.Problem()
        model = prob.model

        options = {}
        options[Aircraft.VerticalTail.NUM_TAILS] = 0
        options[Aircraft.Fuselage.NUM_FUSELAGES] = 1
        options[Aircraft.Engine.NUM_ENGINES] = [0]

        model.add_subsystem('cf', SkinFriction(num_nodes=n, **options), promotes=['*'])

        prob.setup(force_alloc_complex=True)

        prob.set_val('cf.temperature', temp[:n])
        prob.set_val('cf.static_pressure', pres[:n])
        prob.set_val('cf.mach', machs[:n])
        prob.set_val('cf.characteristic_lengths', lens[:nc])

        prob.run_model()

        derivs = prob.check_partials(method='cs', out_stream=None)
        # Atol set higher because some derivs are on the order 1e7
        assert_check_partials(derivs, atol=1e-08, rtol=1e-12)

        expected_ct_iter = np.array(
            [
                [0.01898115, 0.01659121, 0.01513528],
                [0.01683023, 0.01479386, 0.01354618],
                [0.01552035, 0.01369303, 0.01256915],
                [0.01462014, 0.01293339, 0.01189309],
                [0.01395886, 0.01237359, 0.01139382],
                [0.01345288, 0.01194415, 0.01101014],
                [0.01324268, 0.01176543, 0.01085027],
                [0.0131464, 0.0116835, 0.01077695],
                [0.01305543, 0.01160606, 0.01070762],
                [0.0129694, 0.01153279, 0.010642],
                [0.01288799, 0.01146341, 0.01057985],
                [0.0128109, 0.01139768, 0.01052094],
            ]
        )
        expected_skin_cf = np.array(
            [
                [0.02081979, 0.01830256, 0.01676351],
                [0.01812046, 0.01601054, 0.01471376],
                [0.01644993, 0.01458313, 0.01343178],
                [0.01526502, 0.01356561, 0.01251483],
                [0.01435403, 0.01277992, 0.01180471],
                [0.01361502, 0.01214004, 0.01122482],
                [0.01329152, 0.01185913, 0.01096975],
                [0.01313905, 0.01172656, 0.01084927],
                [0.01299212, 0.0115987, 0.010733],
                [0.01285029, 0.01147518, 0.01062061],
                [0.0127132, 0.01135567, 0.01051181],
                [0.0125805, 0.0112399, 0.01040636],
            ]
        )
        expected_re = np.array(
            [
                [2535.112674, 3802.669010, 5070.225348],
                [3802.669010, 5704.003516, 7605.338022],
                [5070.225348, 7605.338021, 10140.450696],
                [6337.781685, 9506.67253, 12675.563370],
                [7605.338021, 11408.007033, 15210.676043],
                [8872.894359, 13309.341538, 17745.788718],
                [9506.672527, 14260.008791, 19013.345055],
                [9823.561612, 14735.342417, 19647.123223],
                [10140.450696, 15210.676044, 20280.901392],
                [10457.339780, 15686.009670, 20914.679560],
                [10774.228864, 16161.343297, 21548.457729],
                [11091.117949, 16636.676923, 22182.235897],
            ]
        )
        expected_wall_temp = np.array(
            [
                [312.2257434, 307.72648885, 304.58447993],
                [325.53580719, 321.38549197, 318.47318481],
                [336.14581431, 332.22311052, 329.46157595],
                [345.77748172, 341.9998021, 339.33440433],
                [355.19308974, 351.49805053, 348.88701044],
                [364.78724817, 361.12449161, 358.53377984],
                [369.724644, 366.0616753, 363.47001514],
                [372.23709293, 368.57026339, 365.97557009],
                [374.78120136, 371.10811275, 368.50874977],
                [377.35853852, 373.67686302, 371.07124056],
                [379.97046618, 376.27794052, 373.6645118],
                [382.61816115, 378.91258145, 376.2898394],
            ]
        )
        assert_near_equal(prob.get_val('cf_iter'), expected_ct_iter, 1e-6)
        assert_near_equal(prob.get_val('skin_friction_coeff'), expected_skin_cf, 1e-6)
        assert_near_equal(prob.get_val('Re'), expected_re, 1e-6)
        assert_near_equal(prob.get_val('wall_temp'), expected_wall_temp, 1e-6)

    def test_derivs_multiengine(self):
        n = 12
        nc = 9

        machs = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.75, 0.775, 0.8, 0.825, 0.85, 0.875])
        lens = np.linspace(1, 2, nc)
        temp = np.ones(n) * 389.97
        pres = np.ones(n) * 2.60239151

        prob = om.Problem()
        model = prob.model

        options = {}
        options[Aircraft.VerticalTail.NUM_TAILS] = 0
        options[Aircraft.Fuselage.NUM_FUSELAGES] = 1
        options[Aircraft.Engine.NUM_ENGINES] = [2, 4]

        model.add_subsystem('cf', SkinFriction(num_nodes=n, **options), promotes=['*'])

        prob.setup(force_alloc_complex=True)

        prob.set_val('cf.temperature', temp[:n])
        prob.set_val('cf.static_pressure', pres[:n])
        prob.set_val('cf.mach', machs[:n])
        prob.set_val('cf.characteristic_lengths', lens[:nc])

        prob.run_model()

        derivs = prob.check_partials(method='cs', out_stream=None)
        # Atol set higher because some derivs are on the order 1e7
        assert_check_partials(derivs, atol=1e-08, rtol=1e-12)

        # fmt: off
        expected_ct_iter = np.array(
            [
                [
                    0.01898115, 0.01824181, 0.01761276, 0.01706852, 0.01659121,
                    0.01616784, 0.01578872, 0.01544645, 0.01513528,
                ],
                [
                    0.01683023, 0.01620174, 0.01566599, 0.01520168, 0.01479386,
                    0.01443163, 0.01410686, 0.01381333, 0.01354618,
                ],
                [
                    0.01552035, 0.01495726, 0.01447664, 0.01405966, 0.01369303,
                    0.0133671, 0.01307463, 0.01281008, 0.01256915,
                ],
                [
                    0.01462014, 0.01410095, 0.0136574, 0.01327226, 0.01293339,
                    0.01263193, 0.01236126, 0.0121163, 0.01189309,
                ],
                [
                    0.01395886, 0.01347133, 0.01305453, 0.0126924, 0.01237359,
                    0.01208984, 0.01183496, 0.01160419, 0.01139382,
                ],
                [
                    0.01345288, 0.0129892, 0.01259257, 0.0122478, 0.01194415,
                    0.01167378, 0.01143082, 0.01121078, 0.01101014,
                ],
                [
                    0.01324268, 0.0127888, 0.01240047, 0.01206285, 0.01176543,
                    0.01150057, 0.01126253, 0.01104691, 0.01085027,
                ],
                [
                    0.0131464, 0.01269699, 0.01231244, 0.01197807, 0.0116835,
                    0.01142116, 0.01118536, 0.01097176, 0.01077695,
                ],
                [
                    0.01305543, 0.01261023, 0.01222925, 0.01189795, 0.01160606,
                    0.01134608, 0.0111124, 0.0109007, 0.01070762,
                ],
                [
                    0.0129694, 0.01252817, 0.01215056, 0.01182215, 0.01153279, 
                    0.01127505, 0.01104336, 0.01083345, 0.010642,
                ],
                [
                    0.01288799, 0.01245051, 0.01207606, 0.01175039, 0.01146341,
                    0.01120778, 0.01097797, 0.01076977, 0.01057985,
                ],
                [
                    0.0128109, 0.01237695, 0.01200549, 0.0116824, 0.01139768,
                    0.01114404, 0.01091602, 0.01070941, 0.01052094,
                ],
            ]
        )

        expected_skin_cf = np.array(
            [
                [
                    0.02081979, 0.02004218, 0.01937982, 0.01880616, 0.01830256,
                    0.01785549, 0.01745483, 0.01709284, 0.01676351,
                ],
                [
                    0.01812046, 0.01747006, 0.01691509, 0.01643371, 0.01601054,
                    0.01563439, 0.01529692, 0.0149917, 0.01471376,
                ],
                [
                    0.01644993, 0.0158753, 0.0153844, 0.01495817, 0.01458313,
                    0.0142495, 0.01394994, 0.01367883, 0.01343178,
                ],
                [
                    0.01526502, 0.01474245, 0.01429566, 0.01390743, 0.01356561,
                    0.01326134, 0.01298799, 0.01274048, 0.01251483,
                ],
                [
                    0.01435403, 0.01387038, 0.0134566, 0.01309684, 0.01277992,
                    0.01249769, 0.01224403, 0.01201426, 0.01180471,
                ],
                [
                    0.01361502, 0.01316212, 0.01277444, 0.01243722, 0.01214004,
                    0.01187528, 0.01163725, 0.01142157, 0.01122482,
                ],
                [
                    0.01329152, 0.01285181, 0.01247535, 0.01214782, 0.01185913,
                    0.0116019, 0.0113706, 0.01116099, 0.01096975,
                ],
                [
                    0.01313905, 0.01270551, 0.01233428, 0.01201128, 0.01172656,
                    0.01147285, 0.0112447, 0.01103793, 0.01084927,
                ],
                [
                    0.01299212, 0.01256448, 0.01219827, 0.01187961, 0.0115987,
                    0.01134836, 0.01112323, 0.01091918, 0.010733,
                ],
                [
                    0.01285029, 0.01242832, 0.01206693, 0.01175244, 0.01147518,
                    0.01122808, 0.01100584, 0.01080442, 0.01062061,
                ],
                [
                    0.0127132, 0.01229667, 0.01193991, 0.01162943, 0.01135567,
                    0.01111169, 0.01089225, 0.01069333, 0.01051181,
                ],
                [
                    0.0125805, 0.01216921, 0.01181691, 0.01151028, 0.0112399,
                    0.01099892, 0.01078216, 0.01058567, 0.01040636,
                ],
            ]
        )

        expected_re = np.array(
            [
                [
                    2535.11267397, 2852.00175822, 3168.89084247, 3485.77992671,
                    3802.66901096, 4119.55809521, 4436.44717945, 4753.3362637, 5070.22534795,
                ],
                [
                    3802.66901096, 4278.00263733, 4753.3362637, 5228.66989007,
                    5704.00351644, 6179.33714281, 6654.67076918, 7130.00439555, 7605.33802192,
                ],
                [
                    5070.22534795, 5704.00351644, 6337.78168493, 6971.55985343,
                    7605.33802192, 8239.11619041, 8872.89435891, 9506.6725274, 10140.45069589,
                ],
                [
                    6337.78168493, 7130.00439555, 7922.22710617, 8714.44981678,
                    9506.6725274, 10298.89523802, 11091.11794863, 11883.34065925, 12675.56336987,
                ],
                [
                    7605.33802192, 8556.00527466, 9506.6725274, 10457.33978014,
                    11408.00703288, 12358.67428562, 13309.34153836, 14260.0087911, 15210.67604384,
                ],
                [
                    8872.89435891, 9982.00615377, 11091.11794863, 12200.2297435,
                    13309.34153836, 14418.45333323, 15527.56512809, 16636.67692295, 17745.78871782,
                ],
                [
                    9506.6725274, 10695.00659333, 11883.34065925, 13071.67472518,
                    14260.0087911, 15448.34285703, 16636.67692295, 17825.01098888, 19013.3450548,
                ],
                [
                    9823.56161165, 11051.5068131, 12279.45201456, 13507.39721602,
                    14735.34241747, 15963.28761893, 17191.23282038, 18419.17802184, 19647.1232233,
                ],
                [
                    10140.45069589, 11408.00703288, 12675.56336987, 13943.11970686,
                    15210.67604384, 16478.23238083, 17745.78871782, 19013.3450548, 20280.90139179,
                ],
                [
                    10457.33978014, 11764.50725266, 13071.67472518, 14378.84219769,
                    15686.00967021, 16993.17714273, 18300.34461525, 19607.51208776, 20914.67956028,
                ],
                [
                    10774.22886439, 12121.00747244, 13467.78608048, 14814.56468853,
                    16161.34329658, 17508.12190463, 18854.90051268, 20201.67912073, 21548.45772878,
                ],
                [
                    11091.11794863, 12477.50769221, 13863.89743579, 15250.28717937,
                    16636.67692295, 18023.06666653, 19409.45641011, 20795.84615369, 22182.23589727,
                ],
            ]
        )
        expected_wall_temp = np.array(
            [
                [
                    312.2257434, 310.91072134, 309.73985349, 308.68528692,
                    307.72648885, 306.84789293, 306.03742045, 305.28551328, 304.58447993,
                ],
                [
                    325.53580719, 324.32521822, 323.24563283, 322.27191154,
                    321.38549197, 320.57228106, 319.82132882, 319.12395976, 318.47318481,
                ],
                [
                    336.14581431, 335.00316978, 333.98309588, 333.06217839,
                    332.22311052, 331.45273996, 330.7408387, 330.07929681, 329.46157595,
                ],
                [
                    345.77748172, 344.67810867, 343.69595071, 342.8086856,
                    341.9998021, 341.25674448, 340.56974301, 339.93104691, 339.33440433,
                ],
                [
                    355.19308974, 354.11844249, 353.15790517, 352.28979071,
                    351.49805053, 350.77047571, 350.09756276, 349.47176953, 348.88701044,
                ],
                [
                    364.78724817, 363.72241041, 362.77035004, 361.90965915,
                    361.12449161, 360.40278964, 359.73516534, 359.11416672, 358.53377984,
                ],
                [
                    369.724644, 368.65987786, 367.70778972, 366.8469981,
                    366.0616753, 365.33977678, 364.67192433, 364.05067326, 363.47001514,
                ],
                [
                    372.23709293, 371.17125423, 370.21817293, 369.35645507,
                    368.57026339, 367.84754578, 367.17891796, 366.55693025, 365.97557009,
                ],
                [
                    374.78120136, 373.71358252, 372.75888265, 371.895679,
                    371.10811275, 370.38411524, 369.71428915, 369.09117435, 368.50874977,
                ],
                [
                    377.35853852, 376.28845297, 375.33152752, 374.46629484,
                    373.67686302, 372.95113807, 372.27970293, 371.6550817, 371.07124056,
                ],
                [
                    379.97046618, 378.89724658, 377.93750541, 377.06971548,
                    376.27794052, 375.55005281, 374.87660896, 374.2501122, 373.6645118,
                ],
                [
                    382.61816115, 381.5411578, 380.5780263, 379.70716469,
                    378.91258145, 378.18210689, 377.50626497, 376.87753302, 376.2898394,
                ],
            ]
        )
        # fmt: on

        assert_near_equal(prob.get_val('cf_iter'), expected_ct_iter, 1e-6)
        assert_near_equal(prob.get_val('skin_friction_coeff'), expected_skin_cf, 1e-6)
        assert_near_equal(prob.get_val('Re'), expected_re, 1e-6)
        assert_near_equal(prob.get_val('wall_temp'), expected_wall_temp, 1e-6)

    def test_skin_friction_algorithm(self):
        # Test vs aviary1 algorithm output.
        n = 12
        nc = 3

        machs = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.75, 0.775, 0.8, 0.825, 0.85, 0.875])
        lens = np.linspace(1, 2, nc)
        temp = np.ones(n) * 389.97
        pres = np.ones(n) * 374.74437747

        prob = om.Problem()
        model = prob.model

        options = {}
        options[Aircraft.VerticalTail.NUM_TAILS] = 0
        options[Aircraft.Fuselage.NUM_FUSELAGES] = 1
        options[Aircraft.Engine.NUM_ENGINES] = [0]

        model.add_subsystem('cf', SkinFriction(num_nodes=n, **options))

        prob.setup(force_alloc_complex=True)

        prob.set_val('cf.temperature', temp[:n])
        prob.set_val('cf.static_pressure', pres[:n])
        prob.set_val('cf.mach', machs[:n])
        prob.set_val('cf.characteristic_lengths', lens[:nc])

        prob.run_model()

        data = np.array(
            [
                [0.005396523989004909, 365059.9023227319],
                [0.004966765578135659, 547589.8534840979],
                [0.004690457476125405, 730119.8046454638],
                [0.004944328211075446, 547589.8534840978],
                [0.004562147270958159, 821384.7802261466],
                [0.004315727215872133, 1095179.7069681955],
                [0.004643056166682007, 730119.8046454638],
                [0.00429139345173995, 1095179.7069681957],
                [0.004064221738701749, 1460239.6092909276],
                [0.004414783804315559, 912649.7558068297],
                [0.004085425540068907, 1368974.6337102444],
                [0.0038723696464216576, 1825299.5116136593],
                [0.004228034334994051, 1095179.7069681955],
                [0.0039162899726263006, 1642769.5604522931],
                [0.0037144161374653376, 2190359.413936391],
                [0.004067313880014865, 1277709.6581295615],
                [0.0037702154884929626, 1916564.487194342],
                [0.003577666619089076, 2555419.316259123],
                [0.003993874389670162, 1368974.6337102444],
                [0.003703301621412952, 2053461.9505653665],
                [0.0035149162534008037, 2737949.267420489],
                [0.0039585444977749615, 1414607.121500586],
                [0.003671073155610844, 2121910.682250879],
                [0.003484668543701865, 2829214.243001172],
                [0.003924040592737333, 1460239.6092909276],
                [0.0036395743600069483, 2190359.4139363915],
                [0.003455090229668116, 2920479.2185818553],
                [0.003890297607565131, 1505872.097081269],
                [0.0036087474909260266, 2258808.1456219032],
                [0.003426128150494066, 3011744.194162538],
                [0.003857257490610407, 1551504.5848716104],
                [0.0035785410558282315, 2327256.8773074155],
                [0.0033977349180204213, 3103009.169743221],
                [0.00382486832849627, 1597137.0726619519],
                [0.003548909032785302, 2395705.6089929277],
                [0.003369868196564652, 3194274.1453239038],
            ]
        )

        cf = prob.get_val('cf.skin_friction_coeff').ravel()
        Re = prob.get_val('cf.Re').ravel()

        cf_diff = np.abs(data[:, 0] - cf) / np.max(cf)
        Re_diff = np.abs(data[:, 1] - Re) / np.max(Re)

        assert_near_equal(np.max(cf_diff), 0.0, 1e-4)
        assert_near_equal(np.max(Re_diff), 0.0, 1e-4)


if __name__ == '__main__':
    unittest.main()
